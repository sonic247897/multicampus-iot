package exam;
import java.awt.EventQueue;
import java.awt.Font;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.UnsupportedCommOperationException;


// 서버 프로그램
public class ChatServerView extends JFrame {
	 JPanel contentPane;
	 JTextArea taclientlist;
	 JButton btnchangeport;
	 JButton btnstartServer;
	 JButton btnstop;
	 
	 ServerSocket server;
	 Socket socket;
	 InputStream is;
	 OutputStream os;
	 
	 int ledState;
	 
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ChatServerView frame = new ChatServerView();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public ChatServerView() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 673, 513);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		taclientlist = new JTextArea();
		taclientlist.setFont(new Font("HY견고딕", Font.BOLD, 16));
		taclientlist.setBounds(12, 50, 472, 415);
		//contentPane.add(taclientlist);
		
		// text area를 스크롤에 붙임
		JScrollPane scroll = new JScrollPane(taclientlist);
		scroll.setBounds(12, 50, 472, 415); // text area와 같은 크기
		contentPane.add(scroll);
		
		JLabel label = new JLabel("\uC811\uC18D\uC790:");
		label.setFont(new Font("HY견고딕", Font.BOLD, 14));
		label.setBounds(12, 10, 120, 35);
		contentPane.add(label);
		
		btnchangeport = new JButton("\uD3EC\uD2B8\uBCC0\uACBD");
		btnchangeport.setFont(new Font("HY견고딕", Font.BOLD, 14));
		btnchangeport.setBounds(516, 50, 129, 35);
		contentPane.add(btnchangeport);
		
		btnstartServer = new JButton("\uC11C\uBC84\uC2DC\uC791");
		btnstartServer.setFont(new Font("HY견고딕", Font.BOLD, 14));
		btnstartServer.setBounds(516, 95, 129, 35);
		contentPane.add(btnstartServer);
		
		btnstop = new JButton("\uC11C\uBC84\uC911\uC9C0");
		btnstop.setFont(new Font("HY견고딕", Font.BOLD, 14));
		btnstop.setBounds(516, 140, 129, 35);
		contentPane.add(btnstop);
		// 리스너 붙임
		btnstartServer.addActionListener(new ChatServerListener(this));
		btnstop.addActionListener(new ChatServerListener(this));
	}
	
	
	public void serverStart(int port) {
		try {
			server = new ServerSocket(port);
			taclientlist.append("사용자 접속 대기중\n");
			if(server != null) {
				// 클라이언트의 접속을 기다리는 처리
				connection();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}

	public void connection() {
		Thread thread = new Thread(new Runnable() {
			@Override
			public void run() {
				while(true) {
					try {
						// 다른 접속자가 접속하면 accept되면서 소켓이 계속 교체된다.
						socket = server.accept();
						String ip = socket.getInetAddress().getHostAddress();
						taclientlist.append(ip+"========사용자 접속!!!\n");
						// 데이터 읽어서 Serial포트로 전송
						new Thread(new Runnable() {
							@Override
							public void run() {
								try {
									ledState = is.read();
									// 아두이노와 통신할 수 있는 각자의 포트 번호
									new SerialArduinoLEDexam(ledState).connect("COM11");
								} catch (IOException e) {
									e.printStackTrace();
								}
							}
						}).start();
						
					} catch (IOException e) {
						e.printStackTrace();
					}
				}// end while
			}
		});
		thread.start();
	}
	
	public void connect2(String portName) {
		try {
			// COM포트가 실제 존재하고 사용가능한 상태인지 확인
			CommPortIdentifier commPortIdentifier =
					CommPortIdentifier.getPortIdentifier(portName);
			// 포트가 사용중인지 아닌지 체크
			if(commPortIdentifier.isCurrentlyOwned()) {
				System.out.println("포트를 사용할 수 없습니다.");
			}else {
				System.out.println("포트 사용 가능");
				// port가 사용 가능하면 포트를 열고 포트객체 얻어오기
				// 포트를 사용할 수 있게 모델링한 객체 - CommPort
				// 매개변수1: 포트를 열고 사용하는 프로그램의 이름(문자열)(아무렇게나 줘도 됨)
				// 매개변수2: 포트를 열고 통신하기 위해서 기다리는 시간(밀리세컨드)
				//			ex) 톰캣의 timeout과 같음
				// 접속, 통신 -> Exception
				CommPort commPort 
						= commPortIdentifier.open("basic_serial", 5000);
				//System.out.println(commPort);
				// 유효성 검사 - instanceof 쓰면 거의 캐스팅 목적이다!
				if(commPort instanceof SerialPort) {
					System.out.println("SerialPort");
					// 실제 쓸 때는 지역변수가 아니라 멤버변수로 정의한다.
					SerialPort serialPort = (SerialPort)commPort;
					// SerialPort에 대한 설정
					serialPort.setSerialPortParams(9600,
							SerialPort.DATABITS_8, 
							SerialPort.STOPBITS_1, 
							SerialPort.PARITY_NONE);
					InputStream in = serialPort.getInputStream();
					OutputStream out = serialPort.getOutputStream();
					
					// 데이터를 주고 받는 작업을 여기에 작성(스레드 버전)
					// 안드로이드에서 입력받은 값을 아두이노로 전송하는 스레드
					new SerialArduinoWriterThread(out).start();
					
				}else {
					System.out.println("SerialPort만 작업할 수 있습니다.");
				}
			}
		} catch (NoSuchPortException e) {
			e.printStackTrace();
		}catch (PortInUseException e) {
			e.printStackTrace();
		} catch (UnsupportedCommOperationException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	
}






